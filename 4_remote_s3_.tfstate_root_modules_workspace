cd terraform/doc
main.tf  output.tf  terraform.tfstate  terraform.tfstate.backup  variable.tf  versions.tf
#### if u remove terraform.tfstate  file terraform nothing to do ### just createing
vi main.tf
# Define the AWS provider
provider "aws" {
  region = "ap-south-1"
}

# Launch an EC2 instance
resource "aws_instance" "Example" {
  ami           = "ami-0522ab6e1ddcc7055"
  instance_type = "t2.micro"
}
###########################################
terraform validate,plan , apply 
### it create new intance 
terraform plan   ##### update ####
rm terraform.tfstate 
terraform plan   ### IT SHOW U READY TO INSTALL intance but it will ERROR tag or name given
terraform destroy   ### IT WILL ERROR  BECOUSE tage or name given
terraform apply   # if nat give tag or name it created new instance ##################
#######################################################################################################
######################## STATE FILE REMOTELY STRORE IN S3 #######################################
cd terrafor/aws 
vi main.tf 
# Define the AWS provider
provider "aws" {
  region = "ap-south-1"
}
# Create an S3 bucket
resource "aws_s3_bucket" "example_bucket" {
  bucket = "wezvatech-adan-demo-s3"
  depends_on = [aws_instance.Example]
}
#######################################################################
terraform applt -auto-approve
############################################################
# NOW CREATE backend
mkdir backend
cd backend
##
cp ../aws/main.tf_orig  .   DORT IMP         #####  THIS ONE FOLDER TO ONETHER FOLDER COPY ##########
mv main.tf_orih main.tf
###
vi manin.tf    vi backend.tf
vi main.tf
# Define the AWS provider
provider "aws" {
  region = "ap-south-1"
}

# Launch an EC2 instance
resource "aws_instance" "Example" {
  ami           = "ami-0522ab6e1ddcc7055"
  instance_type = "t2.micro"
}
############################################
vi backend.tf

terraform {
  backend "s3" {
    bucket = "sravantech-adan-demo-s3"
    key    = "default/terraform.tfstate"
    region = "ap-south-1"
  }
}
###################################################
terraform validate, plan.apply,
## .tfstae file create in s3 bucket
mkdir test
cd test
#########
cp ../backend/*.tf .
############
ls ### its available##########
test
vi main.tf   backend.tf
#############################
terraform init
terraform plan     #### it up to date  #### show u####
######################################################################
1.manual delete go to s3 and delete 
2. then go to cd /awss 
cd ../awss/
################################################################################################
terraform destroy   #### it is also going to delete becuse of awss have [localy] .tfstate file
################################################################################################
####################     WORKSPACE    #########################################################
cd /terraform/doc
 terraform workspace list
* default            ###  check any folder it available   ###########\
# to create new workspace
terraform workspace new test    ### Created and switched to workspace "test"! ###
##### terraform.tfstate.d     < it created blue colore >
ls terraform.tfstate.d
test
terraform workspace list
  default
* test
terraform workspace show
test
##############################
terraform workspace select default     #### Switched to workspace "default"  ##
terraform validate ,plan ,apply   it careated own state file from terraform.tfstate.d  here ######
terraform plan    it up date 
###############################
terraform workspace select test
* test
terraform plan   to new create becouse its not have ,tf sate file 
ls terraform.tfstate.d/test/
terraform.tfstate
terraform workspace delete test
Deleted workspace "test"!
####################################################
#######################  MODULES  #########################################################
cd terraform
mkdir modulesx
cd modulesx
touch main.tf  variable.tf
mkdir moduls
cd moduls
mkdir image container
############################################################
cd image
vi main.tf
# Pulls the image
resource "docker_image" "myimg" {
  name = var.image_name
}
############################
vi variables.tf
variable "image_name" {
default = "nginx:latest"
}
###########################
vi output.tf
output "image_name" {
  value =docker_image.myimg.latest
}
##############################
terraform init,validate,plan,apply,destroy    ### OK ##
############################
cd container
vi main.tf

# Create a container
resource "docker_container" "mycontainer" {
  name = var.container_name
  image  = "nginx:latest"
 ports {
   internal = "80"
   external = "80"
   }
}
#########################
vi variable.tf
variable "container_name" {
default = "noname"
}















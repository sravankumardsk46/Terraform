################  AWS CLI INSTALL ON UBUNTU OS ##################################
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
sudo apt install unzip -y && unzip awscliv2.zip
sudo ./aws/install --bin-dir /usr/bin --install-dir /usr/bin/aws_cli --update
aws --version

aws configure
$ aws configure
AWS Access Key ID [None]: YOUR_ACCESS_KEY_ID    NONAME
AWS Secret Access Key [None]: YOUR_SECRET_ACCESS_KEY    NONAME
Default region name [None]: AP-SOUTH-1
Default output format [None]: json
##################################################################################
########################  AWS CLI INSTALL ON AMAZONE LINUX OS ###################
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
sudo yum install unzip -y && unzip awscliv2.zip
sudo ./aws/install --bin-dir /usr/bin --install-dir /usr/bin/aws_cli --update
aws --version 
which aws

aws configure
$ aws configure
AWS Access Key ID [None]: YOUR_ACCESS_KEY_ID
AWS Secret Access Key [None]: YOUR_SECRET_ACCESS_KEY
Default region name [None]: us-west-2
Default output format [None]: json
####################################################################################
# credentiol find
ls ~/.aws
config credentiols
cd ~/.aws
cat credentiol    #### show u credentiols ########
ACCSSEC
SECRET
cat config
REGION
JSON
cd ~/.aws # env | grep -i aws
##### it show u actuval credentiol### copy past in configur
aws configure
assec key give
secret key give
# add multifull credentiol 
cd ~/.aws
vi credentiol

[default]
aws_access_key_id = key
aws_secret_access_key = key

[QA]
aws_access_key_id = key
aws_secret_access_key = key      

[PROD]
aws_access_key_id = key
aws_secret_access_key = key   
wq!
-------------------------------------------
provider "aws" {
   rigion = "ap-south-1"
   profile = "QA|PROD"      # access/seccret key referered from ~/.aws/credentiol #
---------------------------------------------------
# same QA environ ment can use     alias
# resorce block called   alias
-----------------------------------------------------
# AWS Provider Configuration
provider "aws" {
  region  = "ap-south-1"
  profile = "QA"  # Access/secret key referred from ~/.aws/credentials
  alias   = "mumbai"
}

provider "aws" {
  alias   = "north-virginia"  # Alias name for referral
  region  = "us-east-1"
  profile = "QA"
}

# EC2 Instance Resource in North Virginia
resource "aws_instance" "example" {
  ami           = "ami-02b49a24cfb95941c"  # Specify your AMI ID
  instance_type = "t2.micro"
  provider      = aws.north-virginia  # Alias name to pick the provider
}
########################################################################
#  provider      = aws.mubaie ## this si refferal alias u donat give any name it take[ defualt  ]
   or [  QA   ]   or    [   PROD    ]    
#################################################################################################
##########  importent  u are state file in s3 two person work at the time it problem so one person plan lock apply lock 
this work wen finsh lock is open second person waiting becouse show him it lock wen lock open secound person do work s3 is databace 
in s3 have dynamoDB databace is no colem and tables its Json parmet
##########################################################################################################################
################################  DynamoDB locking statefile in terraform   #################################################
mkdir realtimeproject
cd realproject 
vi main.tf

provider "aws" {
  region = "ap-south-1"              # Replace with your desired region
}

resource "aws_s3_bucket" "example" {
  bucket = "wezvatech-sravan-demo-s3"  # Replace with your desired bucket name
}

resource "aws_dynamodb_table" "dynamodb-terraform-state-locks" {
  name         = "terraform-state-lock-dynamo"  # Replace with your desired table name
  billing_mode = "PROVISIONED"           # Use "PROVISIONED" for fixed read/write capacity
  hash_key = "LockID"
  read_capacity  = 20                    # Set read capacity units
  write_capacity = 20                    # Set write capacity units
  attribute {
    name = "LockID"
    type = "S"
  }

  tags = {
    Name = "DynamoDB Terraform state Lock Table"
  }
}

###########################################################################################################
terraform init validate paln apply
############################################################################################################
mkdir statelock
cd statelock
vi main.tf         
provider "aws" {
  region = "ap-south-1"  
}

# Define an EC2 instance
resource "aws_instance" "example" {
  ami           = "ami-02b49a24cfb95941c" 
  instance_type = "t2.micro"  
}
#################


vi backend.tf
terraform {
  backend "s3" {
    bucket         = "wezvatech-sravan-demo-s3"
    key            = "default/terraform.tfstate"
    region         = "ap-south-1"
    dynamodb_table = "terraform-state-lock-dynamo"
  }
}
####################################################################
cd statelock
terrform init
terrform plan apply
terrfotm plan    uptodate show you
vi main.tf
vi main.tf         
provider "aws" {
  region = "ap-south-1"  
}

# Define an EC2 instance
resource "aws_instance" "example" {
  ami           = "ami-02b49a24cfb95941c" 
  instance_type = "t2.micro" 
  count  =  2    #### i adden this
}
##################################################################
now lock create in dynamodb cancheck affter apply
terrform plan apply
go to dynamodb databace in item can check lock
##############################  ##################################
1.cd stateclock
2.terraform destroy
3. go to s3 bucket only[ delete .statefile] manuvally
4.cd realtimeproject
terraform destroy     # all gone  see check
#####################################################################  DB LOck END  #########
######################### time 7 th class 1:15 start vpc in terraform listen ######################
####################################     VPC     ###############################################
vi variable.tf

# CIDR block for the VPC
variable "vpc_cidr" {
  default     = "10.0.0.0/16"
}

# CIDR block for the public subnet
variable "subnet1_cidr" {
  default     = "10.0.0.0/24"
}

# CIDR block for the private subnet
variable "subnet2_cidr" {
  default     = "10.0.1.0/24"
}

# AMI ID for the EC2 instance
variable "amiid" {
  default     = "ami-0e53db6fd757e38c7" 
}

# Instance type for the EC2 instance
variable "type" {
  default     = "t2.micro"  
}

# PEM file (key pair name) for SSH access
variable "pemfile" {
  default     = "docker_host_key"  
}
#######################################################################################
vi main.tf

# Provider definition
provider "aws" {
  region = "ap-south-1"  # Replace with your region
}
#-----------------
# Create a VPC
#-----------------

resource "aws_vpc" "my_vpc" {
  cidr_block           = var.vpc_cidr
  enable_dns_hostnames = true
  tags = {
    Name = "DEMO VPC - SRAVAN"
  }
}
#---------------------------------------------------------
# get the list of availability zone in the current region
#---------------------------------------------------------
data "aws_availablity_zones"  "all" {}
#----------------------
# Create public subnet
#----------------------

resource "aws_subnet" "public-ap-south-1a" {
  vpc_id            = aws_vpc.my_vpc.id
  cidr_block        = var.subnet1_cidr
  availability_zone = data.aws_availability_zones.all.name[0]  # Replace with your desired AZ
  tags = {
    Name = "Public Subnet - sravan"
  }
}
#-----------------------------
# Create an Internet Gateway
#-----------------------------

resource "aws_internet_gateway" "my_vpc_igw" {
  vpc_id = aws_vpc.my_vpc.id
  tags = {
    Name = "DEMO IGW SRAVAN"
  }
}
#-----------------------------
# Create a public route table FROM A VPC
#------------------------------

resource "aws_route_table" "my_vpc_public" {
  vpc_id = aws_vpc.my_vpc.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id  = aws_internet_gateway.my_vpc_igw.id
}
    
tags = {
    Name = "DEMO Public RouteTable SRAVAN"
  }
}
#-------------------------------------------------- 
# Associate public route table with public subnet create ap-south-1a
#--------------------------------------------------
resource "aws_route_table_association" "my_vpc_ap_south_1a_public" {
  subnet_id      = aws_subnet.public_ap_south_1a.id
  route_table_id = aws_route_table.my_vpc_public.id
}

# Define a Security Group
resource "aws_security_group" "instance" {
  name        = "sravan-example-instance"
  vpc_id      = aws_vpc.my_vpc.id


  # Outbound rules (allow all traffic)
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # Inbound rules (allow SSH and HTTP traffic)
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # Allow SSH access from anywhere (use with caution)
  }
 # Inbound rules for web server
 ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # Allow HTTP access from anywhere
  }
}

# Create an EC2 instance with user_data
resource "aws_instance" "server" {
  ami           = var.amiid  # Use the amiid variable for the AMI ID
  instance_type = var.type   # Use the type variable for the instance type
  key_name      = var.pemfile  # Use the pemfile variable for the key pair name
  vpc_security_group_ids = [aws_security_group.instance.id]
  subnet_id     = aws_subnet.public_ap_south_1a.id
  availability_zone = data.aws_availability_zone.all.name[0]
  associate_public_ip_address = true

  # User data to install a web server
  user_data = <<-EOF
              #!/bin/bash
              yum update -y
              yum install -y httpd
              systemctl start httpd
              systemctl enable httpd
              echo "<h1>Welcome to My Web Server</h1>" > /var/www/html/index.html
              EOF

  tags = {
    Name = "MyWebServer -sravan"
  }
}

#----------------------
# Create private subnet
#----------------------
resource "aws_subnet" "private-ap-south-1b" {
  vpc_id            = aws_vpc.my_vpc.id
  cidr_block        = var.subnet2_cidr
  availability_zone = data.aws_availability_zones.all.names[1] 
 tags = {
    Name = "Private Subnet - sravan"
  }
}

#------------------------------
# Create private route table
#------------------------------
resource "aws_route_table" "my_vpc_private" {
  vpc_id = aws_vpc.my_vpc.id
  route {
    cidr_block     = "0.0.0.0/0"
    instance_id = aws_intance.server.id
  }
  tags = {
    Name = " DEMO Private RouteTable - sravan"
  }
}
#--------------------------------------------------------
# Associate private route table with private subnet
#--------------------------------------------------------
resource "aws_route_table_association" "my_vpc_ap_south_1b_private" {
  subnet_id      = aws_subnet.private-ap-south-1b.id
  route_table_id = aws_route_table.my_vpc_private.id
}

# Define a Security Group
resource "aws_security_group" "db" {
  name   = "sravan-example-db"
  vpc_id = aws_vpc.my_vpc.id
  
 # Egress rules (outgoing traffic)
  egress {
    from_port   = 0                       # Allow all outbound traffic
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

 # Ingress rules (incoming traffic)
  ingress {
    from_port   = 3306                    # SSH access
    to_port     = 3306
    protocol    = "tcp"
    cidr_blocks = [aws_security_group.instance.id]           # 1a subnet sequrity group allo only
  }
}

#---------------------------
# Create an EC2 instance in the private subnet
#---------------------------
resource "aws_instance" "db" {
  ami                         = var.amiid  
  instance_type               = var.type   
  key_name                    = var.pemfile  
  vpc_security_group_ids       = [aws_security_group.db.id]
  subnet_id                   = aws_subnet.private-ap-south-1b.id  
  availability_zone            = data.aws_availability_zones.all.names[1] 

  associate_public_ip_address  = true
 tags = {
    Name = "DB - server - sravan"
  }
}
















TAINT:
##########################################################
main.if
provider "docker" {
  host = "unix:///var/run/docker.sock"
}

# Pulls the image
resource "docker_image" "myimg" {
  name = "nginx"
}

# Create a container
resource "docker_container" "mycontainer" {
  image = docker_image.myimg.latest
  name  = "testng"

 ports {
   internal = "80"
   external = "80"
   }
}
#################################################################
terraform validate
terraform plan
terraform apply --auto-approve
##its created two resource but i need re create same nginx to httpd 
###################################################################
main.if
provider "docker" {
  host = "unix:///var/run/docker.sock"
}

# Pulls the image
resource "docker_image" "myimg" {
  name = "httpd"
}

# Create a container
resource "docker_container" "mycontainer" {  
  image = docker_image.myimg.latest
  name  = "testng"

 ports {
   internal = "80"
   external = "80"
   }
}
#####################################################################################
terraform plan

### it shows nginx > httpd
@#@# go to tacke aws pub ip copy to past on google it show u {nginx} web server
TERRAFORM taint <PROVIDER_RESOURCE.RESOURCE NAME>
# i taken here to copy taint details

terraform taint docker_container.mycontainer
####################################################
[root@ip-172-31-1-162 doc]# terraform taint docker_container.mycontainer
Resource instance docker_container.mycontainer has been marked as tainted.
#####################################################

terraform plan
terraform apply -auto-approve

## here old container destroy to ceate ne container becose of taint markeed in {plan}
terraform destroy 
############################################################################################
######################### AWS ACCESKEY AND SECRETEKEY ########################################################
# goto IAM sectio to careate acces and secter key to craete 
# then go to terraform 
vi ~/. bashrc


export AWS_ACCESS_KEY_ID=your_access_key_id
export AWS_SECRET_ACCESS_KEY=your_secret_access_key
export AWS_DEFAULT_REGION=your_preferred_region

source ~/.bashrc   # relode

#########################################################################
cd terraform 
mkdir aws
cd aws
vi main.tf

# Define the AWS provider
provider "aws" {
  region = "ap-south-1"
}

# Launch an EC2 instance
resource "aws_instance" "Example" {
  ami           = "ami-0522ab6e1ddcc7055" 
  instance_type = "t2.micro"            
}

terraform init
terraform validate
terraform plan
terraform apply -auto-approve
terraform plan
terraform show
terraform destroty
##################################################################
#It looks like there are still some Terraform processes running (terraform destroy) that might be causing the lock issue. To resolve this, you'll need to terminate these processes.
ps aux | grep terraform
kill 37125 37129 37167
kill -9 37125 37129 37167
rm -f .terraform/terraform.tfstate.lock.info
terraform destroy
#### wen d lock tf plan lock 
terraform plan -lock=false
## terraform file lock that open lock ip mention
terraform force-unlock <LOCK_ID>

############ parller exicution #######################
vi main.tf
# Define the AWS provider
provider "aws" {
  region = "ap-south-1"
}

# Launch an EC2 instance
resource "aws_instance" "Example" {
  ami           = "ami-0522ab6e1ddcc7055" 
  instance_type = "t2.micro"            
}

# Create an S3 bucket
resource "aws_s3_bucket" "example_bucket" {
  bucket = "wezvatech-adan-demo-s3"
}
#######################################
terraform apply -auto-approve
## ther are two parlore created and destroy boyh can check
###############################################################
##########33 implicit dependencies ############
vi main.tf
# Define the AWS provider
provider "aws" {
  region = "ap-south-1"
}

# Launch an EC2 instance
resource "aws_instance" "Example" {
  ami           = "ami-0522ab6e1ddcc7055" 
  instance_type = "t2.micro"            
}

# Create an S3 bucket
resource "aws_s3_bucket" "example_bucket" {
  bucket = "wezvatech-adan-demo-s3"
}
# Allocate an Elastic IP
resource "aws_eip" "example" {
  instance = aws_instance.example.id 
}
###################################
terraform apply -auto-approve
## this is created dependeny frist create intence affter that elastic ip 
terraform destroy
##########################################################################
########## Explicit Dependency ######################### depends_on = [aws_instance.Example]
vi main.tf
# Define the AWS provider
provider "aws" {
  region = "ap-south-1"
}

# Launch an EC2 instance
resource "aws_instance" "Example" {
  ami           = "ami-0522ab6e1ddcc7055" 
  instance_type = "t2.micro"            
}

# Create an S3 bucket
resource "aws_s3_bucket" "example_bucket" {
  bucket = "wezvatech-adan-demo-s3"
  depends_on = [aws_instance.Example]  
}
#####################################################
# in there tell frist create instence then only create s3 bucket mean
terraform apply -auto-approve
frist create instence
second create s3 bucket
terraform destry
##########################################################################
################### variable #########################################
vi main.tf
provider "docker" {
  host = "unix:///var/run/docker.sock"
}

variable "image_name" {
default = "nginx:latest"
}

# Pulls the image
resource "docker_image" "myimg" {
  name = var.image_name
}

# Create a container
resource "docker_container" "mycontainer" {
  image = docker_image.myimg.latest
  name  = "testng"

 ports {
   internal = "80"
   external = "80"
   }
}
###############################################################
terraform plan  # it show to current nginx image
terraform plan -var "image_name=httpd:latest"
terraform apply -var "image_name=httpd:latest" -auto-approve
terraform deastroy -var "image_name=httpd:latest"
#################################################################
vi main.tf
provider "docker" {
  host = "unix:///var/run/docker.sock"
}
variable "image_name" {
default = "nginx:latest"
}

variable "container_name" {
default = "noname"
}

# Pulls the image
resource "docker_image" "myimg" {
  name = var.image_name
}

# Create a container
resource "docker_container" "mycontainer" {
  image = var.container_name.latest
  name  = "testng"

 ports {
   internal = "80"
   external = "80"
   }
}
##############################################################################








variable.tf
# optinal parameeter
variable "server_port" {
  description = "The port on which the server http requsest"
  type        = number
  default     = 8080  # Optional: default value
}

variable "elb_port" {
  description = "The port used by the Elastic Load Balancer (ELB) http request"
  type        = number
  default     = 80  # Optional: default value
}
############################################################################
vi main.tf

provider "aws" {
  region = "us-east-1"  # Specify your AWS region
}
# Declare the data source # get the availability zones in current region
data "aws_availability_zones" "all" {}

# Define security group for the ELB
resource "aws_security_group" "elb" {
  name        = "elb_example_elb"
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = var.elb_port
    to_port     = var.elb_port
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}
resource "aws_security_group" "instance" {
  name        = "sravan-example-instance"
 # Inbound rules (ingress)
  ingress {
    from_port   = var.server_port
    to_port     = var.server_port
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  
  }
}
# Define the ELB
resource "aws_elb" "example" {
  name               = "sravan-elb-example"
  security_groups = [aws_security_group.elb.id]
  availability_zones = data.aws_availability_zones.all.names

  health_check {
    target              = "HTTP:${var.server_port}/"
    interval            = 30
    timeout             = 3
    healthy_threshold   = 2
    unhealthy_threshold = 2
  }


  listener {
    instance_port     = var.server_port
    instance_protocol = "HTTP"
    lb_port           = var.elb_port
    lb_protocol       = "HTTP"
  }
}

resource "aws_launch_configuration" "example" {
  name          = "sravan-example-launchconfig"
  image_id      = "ami-0522ab6e1ddcc7055"  # Update with the desired AMI ID
  instance_type = "t2.micro"
  security_groups = [aws_security_group.instance.id]

 user_data = <<-EOF
              #!/bin/bash
              echo "Hello, World!" > /var/www/html/index.html
              EOF

 lifecycle {
    create_before_destroy = true  # Ensure the launch configuration is replaced before being destroyed
  }
}

resource "aws_autoscaling_group" "example" {
  name = "sravan-example-asg"
  launch_configuration = aws_launch_configuration.example.id
  availability_zones = data.aws_availability_zones.all.names

  max_size             = 2
  min_size             = 10

  load_balancers       = [aws_elb.example.name]
  health_check_type         = "ELB"

  tag {
    key                 = "Name"
    value               = "SRAVAN-ASG-PROJECT"
    propagate_at_launch = true
  }
}

##############################################################################
vi output.tf
output "elb_dns_name" {
  description = "The DNS name of the Elastic Load Balancer"
  value       = aws_elb.example.dns_name
}
######################################################################
theeraform apply -auto-approve
#######################################################
###################### IAM  USER DEV QA   ######################
vi main.tf

#module "iam_dev_user" {
 # source    = "./modules/Iamuser"
#  devuser   = 1
#  user_name  = "devuser"
 
}

module "iam_qa_user" {
  source    = "./modules/Iamuser"
  qauser   = 1
  user_name  = "testuser"
 
}
#######################################################################
cd module
> IAMUSER
vi main.tf   
vi variable.tf

vi variable.tf
variable "devuser" {
  description = "The name of the IAM user  create devuser"
  type        = string
}

variable "qauser" {
  description = "The name of the IAM user create qauser"
  type        = bool
  default = false
}

variable "user_name" {
  description = "desire name of the IAM user"
  type        = string
  default = "demouser"
}

variable "tags" {
  description = "path to the IAM user"
  type        = string
  default     = "/"
}

variable "force_destroy" {
  description = "allow force destroy"
  type        = bool
  default     = "true"
}
########################################
vi main.tf

provider "aws" {
  region = "us-east-1" # Adjust as needed
}
# iam policy creation
module "IampolicyDev" {
  source    = "../IampolicyDev"
}

module "IampolicyQA" {
  source    =  "../IampolicyQA"
}

# create iam user
resource "aws_iam_user"  "demo" {
  name = var.name
  path = var.path
  force_destroy = var.force_destroy
tage = {
  "testuser" = var.name
}
}
resource "aws_iam_access_key" "demo"  {
 user = aws_iam_user.demo.name
}

resource "aws_iam_user_policy" "demo" {
  user = aws_iam_user.demo.name
  policy =var.devuser?module.IampolicyDev.policy:module.IampolicyQA.policy
}


######################################################
> IAMPOLICYDEV
main.tf
output.tf
vi main.tf
provider "aws" {
  region = "us-east-1" # Adjust as needed
}

data "aws_iam_policy_document" "demo"


 Statement = [
      {
        Effect   = "Deny"
        Action   = [
          "elasticbeanstalk:CreateEnvironment",
          "elasticbeanstalk:UpdateEnvironment",
          "elasticbeanstalk:TerminateEnvironment"
        ]
        Resource = "*"
      }
    ]

"Statement": [
    {
      "Effect"= "Allow",
      "Action"= ["ec2:RunInstances",]
      "Resource"=[ "arn:aws:ec2:ap-south-1:123456789012:instance/*",
                   "arn:aws:ec2:ap-south-1:123456789012:subnet/subnet-12345678"
]

      "Condition": {
       test = "StringEquals"
      variable = "ec2 instancetype"
        valu = [  "t2.micro","t2.small"]
        }
      }
    }
  resource "aws_iam_policy"  {
       name = "dev_policy"
       path = "/"
       policy = data.aws_iam_policy_document.demo.json
}
######################################3
vi output.tf
output "policy" {
 value = aws_iam_policy.dev.policy
description = "policy expected from aws_iam_policy"
}
################################################
>IAMPOLICYQA
main.tf
output.tf
vi main.tf

provider "aws" {
  region = "us-east-1" # Adjust as needed
}

data "aws_iam_policy_document" "demoqa"

 Statement {        # read only action user
      
        Effect   = "allow"
        Action   = [ readonly accsses
]

  Resource = "*"

# craete iam policy

 resource "aws_iam_policy" "qa" {
       name = "qa_policy"
       path = "/"
       policy = data.aws_iam_policy_document.demoqa.json
}
##############################################################
vi output.tf
output "policy" {
 value = aws_iam_policy.dev.policy
description = "policy expected from aws_iam_policy"
}
######################################################
terraform plan apply destroy
#############################################
### chenge main.tf aq block  open dev in main.tf
#module "iam_dev_user" {
 # source    = "./modules/Iamuser"
#  devuser   = 1
#  user_name  = "devuser"
 
}
########################################








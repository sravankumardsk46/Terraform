cd terraform 
mkdir provisioner
cd provisioner
# this is provisioner create time
vi main.tf
# AWS Provider Configuration
provider "aws" {
  region = "ap-south-1"
}

# EC2 Instance Resource
resource "aws_instance" "example" {
  instance_type = "t2.micro"
  ami           = "ami-0522ab6e1ddcc7055"  # Specify your AMI ID

  # Local Exec Provisioner
  provisioner "local-exec" {
    command = "echo aws_instance.example.private_ip >> private_ips.txt"
  }
}
###################################################################################
terraform init,validate,plan,apply
ls
main.tf  private_ips.txt {# this file locally created } terraform.tfstate
rm  private_ips.txt    # this file after creation no use only createtion time provisionr it not destroy
terraform deatroy     private_ips.txt file available
##################################################################################
# this is provisioner destroy time
cd provisioner
vi main.tf
# AWS Provider Configuration
provider "aws" {
  region = "ap-south-1"
}

# EC2 Instance Resource
resource "aws_instance" "example" {
  instance_type = "t2.micro"
  ami           = "ami-0522ab6e1ddcc7055"  # Specify your AMI ID

  # Local Exec Provisioner
  provisioner "local-exec" {
    command = "echo aws_instance.example.private_ip >> private_ips.txt"
  }
  # Local Exec Provisioner invoke while machine destroyed 
  provisioner "local-exec" {
    when    = "destroy"
    command = "rm private_ips.txt"
  }
}
#############################################################################
terraform validate ,plan ,apply   
ls
main.tf  private_ips.txt  terraform.tfstate  terraform.tfstate.backup
terraform destroy   
# local file destroy   private_ips.txt 
###############################################################################
cd provisioner
vi main.tf
# AWS Provider Configuration
provider "aws" {
  region = "ap-south-1"
}

# EC2 Instance Resource
resource "aws_instance" "example" {
  instance_type = "t2.micro"
  ami           = "ami-0522ab6e1ddcc7055"  # Specify your AMI ID

  # Local Exec Provisioner
  provisioner "local-exec" {
    command = "exit 1"
  }
  # Local Exec Provisioner to remove the file after creation
  provisioner "local-exec" {
    when    = "destroy"
    command = "rm private_ips.txt"
  }
}
############################################################################
# this is failure comming ERROR
terraform plan apply
Error: Error running command 'exit 1': exit status 1. Output:     # create invoc not properl
terrform plan
-/+  tainted, so must be replaced  re creation
Plan: 1 to add, 0 to change, 1 to destroy.
####################
cd provisioner
vi main.tf
# AWS Provider Configuration
provider "aws" {
  region = "ap-south-1"
}

# EC2 Instance Resource
resource "aws_instance" "example" {
  instance_type = "t2.micro"
  ami           = "ami-0522ab6e1ddcc7055"  # Specify your AMI ID

  # Local Exec Provisioner
  provisioner "local-exec" {
    command = "exit 1"
    on_failure = continue
  }
  # Local Exec Provisioner to remove the file after creation
  provisioner "local-exec" {
    when    = "destroy"
    command = "rm private_ips.txt"
  }
}
################################################################
terraform apply -auto-approve
susses
Apply complete! Resources: 1 added, 0 changed, 1 destroyed.
(or)
terraform destroy   # it not destroy need this file locally private_ips.txt    -- so  --
touch private_ips.txt    # locally create then only
terraform destroy    ---  ok  -
###################################################################
###################   file provisioner    ##########################
cd provisioner
--------------------------------------------
vi docker_host_key.pem
    "private key "  "copy past here "
  :wq!
chmod 400 docker_host_key.pem
(locally remove all *tf state file)
--------------------------------------------
vi docker_host_key.pem  
vi test.conf
  "write somthing"
 :wq!
###########################################
vi main.tf
# AWS Provider Configuration
provider "aws" {
  region = "ap-south-1"
}

# EC2 Instance Resource
resource "aws_instance" "example" {
  instance_type = "t2.micro"
  ami           = "ami-02b49a24cfb95941c"  # Specify your AMI ID
  key_name      = "docker_host_key"         # Ensure this key pair exists in your AWS account

  # File Provisioner to copy a file to the instance
  provisioner "file" {
    source      = "test.conf"                # Local file to be copied
    destination = "/tmp/myapp.conf"          # Destination on the EC2 instance
  }

  # SSH Connection Configuration
  connection {
    type        = "ssh"
    user        = "ec2-user"                 # Default user for Amazon Linux 2
    private_key = file("docker_host_key.pem")  # Path to the private key file
    host        = self.public_ip             # Public IP of the instance
  }
}

# Output the public IP of the instance
output "instance_public_ip" {
  value = aws_instance.example.public_ip
}

#################################################################################
this craete time provisioner
terraform valiadate plan apply
go to newly create instance in connect see 
cat /tmp/myapp.con   "output see"
terrform destroy
#################################################################################




